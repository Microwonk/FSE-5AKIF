server.port=9999
spring.application.name=apigateway
#EUREKA-Service-Discovery-Config
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
#Registry-Informationen holen um andere registrierte Services zu kontaktieren
eureka.client.fetch-registry=true 
#API-Gateway soll sich selbst nicht registrieren (soll also nicht über die Registry abrufbar sein)
eureka.client.register-with-eureka=false
#Service-Names der registrierten Services in Lower-Case umwandeln, sonst immer UPPER-CASE in EUREKA
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#Cloud-Gateway erlauben, die Services per Service-Discovery zu ermitteln
spring.cloud.gateway.discovery.locator.enabled=true
#Actuator-CONFIG
management.endpoints.jmx.exposure.include=health,info,env,beans
management.endpoints.web.exposure.include=health,info,env,beans
#CORS-CONFIG
#erlaube bestimmte Origins (in diesem Fall: Live-Server-Extension-Standard-Port 5500)
spring.cloud.gateway.globalcors.cors-configurations."[/**]".allowed-origins=http://127.0.0.1:5500
#CORS erlaubte HTTP-Request-Typen setzen
spring.cloud.gateway.globalcors.cors-configurations."[/**]".allowed-methods=GET,PUT,POST,DELETE
#Header-Einträge erlauben, die für die Bearbeitung von Seiten des Backends nötig sind ...
spring.cloud.gateway.globalcors.cors-configurations."[/**]".allowed-headers=Accept,Content-Type